<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\vs2013\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="F:\Мои документы\GitHub\RadioStation\Radio Station Library\bin\Release\Radio Station Library.dll">
   <Modules>
    <Module Name="radio station library.dll">
     <Namespaces>
      <Namespace Name="Radio_Station_Library">
       <Types>
        <Type Name="MusicPlayer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#MciSendString(System.String,System.Text.StringBuilder,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="PInvokeEntryPointsShouldExist" Category="Microsoft.Interoperability" CheckId="CA1400" Status="Active" Created="2015-12-03 09:20:23Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="CriticalWarning">Correct the declaration of 'MusicPlayer.MciSendString(string, StringBuilder, int, int)' so that it correctly points to an existing entry point in 'winmm.dll'. The unmanaged entry point name currently linked to is MciSendString.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="PInvokeEntryPointsShouldExist" Category="Microsoft.Interoperability" CheckId="CA1400">
   <Name>P/Invoke entry points should exist</Name>
   <Description>Methods decorated with the DllImport attribute should point to existing unmanaged entry points. There is no compile-time check to ensure that methods decorated with the DllImport attribute actually exist in the referenced unmanaged dll. In the event that an entry point does not exist or the specified argument list is not correct, a runtime exception will be generated.</Description>
   <Resolution Name="Default">Correct the declaration of {0} so that it correctly points to an existing entry point in {1}. The unmanaged entry point name currently linked to is {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182208.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalWarning</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
 <Exceptions>
  <Exception Keyword="CA0001" Kind="Engine">
   <Type>Phx.FatalError</Type>
   <ExceptionMessage>Exception of type 'Phx.FatalError' was thrown.</ExceptionMessage>
   <StackTrace>   at Phx.FatalError.Dispatch()
   at Phx.Logging.Diagnostics.DiagnosticMessage.LogMessage(Severity severity, DiagnosticInfo diagnosticInfo, SourceContext sourceContext, String descriptionString)
   at Phx.PE.PEUtilities.UserError(String infoMessage)
   at Phx.Pdb.ReaderImplementation.Open(Boolean loadTypeOnly)
   at Phx.PEModuleUnit.LoadPdb()
   at Phx.PE.ReaderPhase.CheckSymbolicInformation()
   at Phx.PEModuleUnit.LoadGlobalSymbols()
   at Phx.PEModuleUnit.LoadEncodedIRUnitList()
   at Phx.PEModuleUnit.GetEnumerableContributionUnit(ContributionUnitEnumerationKind contributionUnitEnumerationKind)
   at Phx.PEModuleUnit.GetEnumerableContributionUnit()
   at Microsoft.FxCop.Engines.Phoenix.PreScanPass.GetFunctionUnits(PEModuleUnit peModuleUnit)
   at Microsoft.FxCop.Engines.Phoenix.PreScanPass.Execute(ModuleUnit moduleUnit)
   at Phx.Passes.Pass.DoPass(ModuleUnit moduleUnit)
   at Phx.Passes.PassList.DoPassList(ModuleUnit moduleUnit)
   at Microsoft.FxCop.Engines.Phoenix.PhoenixAnalysisEngine.Host.ExecutePasses(PEModuleUnit peModuleUnit)
   at Microsoft.FxCop.Engines.Phoenix.PhoenixAnalysisEngine.AnalyzeInternal()
   at Microsoft.FxCop.Engines.Phoenix.PhoenixAnalysisEngine.Analyze()
   at Microsoft.FxCop.Common.EngineManager.Analyze(Project project, Boolean verboseOutput)</StackTrace>
  </Exception>
 </Exceptions>
</FxCopReport>
